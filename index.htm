<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Page Title</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='main.css'>
    <script src='js.js'></script>
</head>
<body>
    <video id="my-video" controls="true" width="1920" height="1080" crossorigin="anonymous">
    
      </video>
      
      <canvas id="my-canvas" width="1920" height="1080"></canvas>
</body>
<script>

    var constraints = { audio: true, video: { width: 1920, height: 1080 } };
    
  function initGetUserMedia() {
  navigator.mediaDevices = navigator.mediaDevices || {}
  navigator.mediaDevices.getUserMedia = navigator.mediaDevices.getUserMedia || function(constraints) {
    let getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    if (!getUserMedia) {
      return Promise.reject(new Error('getUserMedia not supported by this browser'));
    } else {
      return new Promise((resolve, reject) => {
        getUserMedia.call(navigator, constraints, resolve, reject);
      });
    }
  }
}
initGetUserMedia();

    navigator.mediaDevices.getUserMedia(constraints)
    .then(function(mediaStream) {
    var video = document.querySelector('video');
    video.srcObject = mediaStream;
    video.onloadedmetadata = function(e) {
        video.play();
    // getpx();
    };
    })
    .catch(function(err) { console.log(err.name + ": " + err.message); }); // always check for errors at the end.

    


    var processor = {
    timerCallback: function() {
      if (this.video.paused || this.video.ended) {
        return;
      }
      this.computeFrame();
      var self = this;
      setTimeout(function () {
        self.timerCallback();
      }, 14.205); // roughly 60 frames per second
    },
  
    doLoad: function() {
      this.video = document.getElementById("my-video");
      this.c1 = document.getElementById("my-canvas");
      this.ctx1 = this.c1.getContext("2d");
      var self = this;
  
      this.video.addEventListener("play", function() {
        self.width = self.video.width;
        self.height = self.video.height;
        self.timerCallback();
      }, false);
    },
  
    computeFrame: function() {
      this.ctx1.drawImage(this.video, 0, 0, this.width, this.height);
      var frame = this.ctx1.getImageData(0, 0, this.width, this.height);
      var l = frame.data.length / 4;
  
      for (var i = 0; i < l; i++) {
        var grey = (frame.data[i * 4 + 0]+frame.data[i * 4 + 1] + frame.data[i * 4 + 2]) / 3;
  
        frame.data[i * 4 + 0] = frame.data[i * 4 + 0]*2 ;
        frame.data[i * 4 + 1] = grey;
        frame.data[i * 4 + 2] = grey;
      }
      this.ctx1.putImageData(frame, 0, 0);
  
      return;
    }
  };  
  
  processor.doLoad()</script>
</html>
